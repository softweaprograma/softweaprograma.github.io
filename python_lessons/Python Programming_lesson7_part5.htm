<!DOCTYPE HTML>
<!-- saved from url=(0101)file://C:\Users\gimeia1\Documents\DATA\CSCC\cscc_python\Online_lessons\Python Programming_lesson7.htm -->
<!DOCTYPE html PUBLIC "" ""><!-- saved from url=(0102)https://online.cscc.edu/apps/python/book/lesson_7_part_5.htm --><HTML 
class="part_5" lang="en"><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">

<META http-equiv="X-UA-Compatible" content="IE=11.0000">  
<META charset="utf-8">  <TITLE>Python Programming</TITLE> 
<SCRIPT src="Python%20Programming_lesson7_part5_files/jquery-1.12.3.min.js" type="text/javascript"></SCRIPT>
  
<SCRIPT src="Python%20Programming_lesson7_part5_files/jquery.ui.touch-punch.min.js" type="text/javascript"></SCRIPT>
  
<SCRIPT src="Python%20Programming_lesson7_part5_files/js.cookie.js" type="text/javascript"></SCRIPT>
  
<SCRIPT src="Python%20Programming_lesson7_part5_files/lity.js" type="text/javascript" charset="utf-8"></SCRIPT>
  
<SCRIPT src="Python%20Programming_lesson7_part5_files/highlight.min.js"></SCRIPT>
  
<SCRIPT src="Python%20Programming_lesson7_part5_files/lesson.js" type="text/javascript"></SCRIPT>
  <LINK href="Python%20Programming_lesson7_part5_files/style-empty.css" rel="stylesheet" 
type="text/css" media="screen"> <LINK href="Python%20Programming_lesson7_part5_files/default.min.css" 
rel="stylesheet"> <LINK href="Python%20Programming_lesson7_part5_files/lity.css" 
rel="stylesheet" type="text/css"> <LINK href="Python%20Programming_lesson7_part5_files/lesson.css" 
rel="stylesheet" type="text/css" media="screen"> 
<META name="GENERATOR" content="MSHTML 11.00.10570.1001"></HEAD> 
<BODY>
<DIV id="content">
<DIV id="toc"></DIV>
<DIV id="title">
<H1>Lesson 7, Bit 5: Filenames, Paths, Error Handling, and Debugging</H1></DIV>
<DIV id="page">
<DIV class="fullpage">
<H1>Filenames and Paths</H1>
<P>Files are organized into directories (also called 
 "<STRONG><EM>folders</EM></STRONG>"). Every running program has a 
 "<STRONG><EM>current directory</EM></STRONG>", which is the default directory 
 for most operations. For example, when you open a file for reading, Python 
looks  for it in the current directory.</P>
<P>The <CODE>os</CODE> module provides functions for working with files and 
 directories ("os" stands for "operating system"). <CODE>os.getcwd</CODE> 
returns  the name of the current directory:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>import os<BR><BR>              cwd = os.getcwd()<BR><BR>         
                 print(cwd)</CODE></TD>
    <TD><CODE>C:\Python</CODE></TD></TR></TBODY></TABLE>
<P><CODE>cwd</CODE> stands for "current working directory". The result in this 
 example is <CODE>C:\Python</CODE>.</P></DIV>
<DIV class="fullpage">
<P>A string like <CODE>'C:\Python'</CODE> that identifies a file or directory is 
 called a <STRONG><EM>path</EM></STRONG>.</P>
<P>A simple filename, like <CODE>mbox.txt</CODE> is also considered a path, but 
 it is a relative path because it relates to the current directory. If the 
 current directory is <CODE>C:\Python</CODE>, the filename <CODE>mbox.txt</CODE> 
would refer to <CODE>C:\Python \mbox.txt</CODE>.</P>
<P>A path that begins with <CODE>/</CODE> does not depend on the current 
 directory; it is called an <STRONG><EM>absolute path</EM></STRONG>. To find the 
 absolute path to a file, you can use <CODE>os.path.abspath</CODE>:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>import os<BR><BR>              path =       
      os.path.abspath('mbox.txt')<BR><BR>              print(path)</CODE></TD>
    <TD><CODE>C:\Python\mbox.txt</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P><CODE>os.path</CODE> provides other functions for working with filenames and 
 paths. For example, <CODE>os.path.exists</CODE> checks whether a file or 
 directory exists:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>import os<BR><BR>                  
      os.path.exists('mbox.txt')</CODE></TD>
    <TD><CODE>True</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>If it exists, <CODE>os.path.isdir</CODE> checks whether it's a directory:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>os.path.isdir('mbox.txt')</CODE></TD>
    <TD><CODE>False</CODE></TD></TR>
  <TR>
    <TD><CODE>os.path.isdir('C:\\Python')</CODE></TD>
    <TD><CODE>True</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>A quick note: notice that the backslash is listed twice in the string  
<CODE>'C:\\Python'</CODE> above. Why is that?&nbsp; Well, remember that a 
 backslash is the escape sequence for creating special characters like newlines  
<CODE>\n</CODE> and tabs <CODE>\t</CODE>.&nbsp; When Python sees a backslash, it 
 assumes an escape sequence is coming. As a result, you need to use <EM>two</EM> 
backslashes for a backslash to display: one is the escape sequence and the other 
 is the character to be displayed.</P></DIV>
<DIV class="fullpage">
<P>Similarly, <CODE>os.path.isfile</CODE> checks whether it's a file.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>os.path.isfile('words.txt')</CODE></TD>
    <TD><CODE>True</CODE></TD></TR>
  <TR>
    <TD><CODE>os.path.isfile('C:\\Python')</CODE></TD>
    <TD><CODE>False</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P><CODE>os.listdir</CODE> returns a list of the files (and other directories) 
 in the given directory:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>os.listdir('C:\\Python')</CODE></TD>
    <TD><CODE>['append.txt', 'DLLs', 'Doc', 'examples.py', 'include',       
      'labs.py', 'Lib', 'libs', 'LICENSE.txt', 'mbox.txt', 'NEWS.txt',       
      'output.txt', 'python.exe', 'python3.dll', 'python35.dll', 'pythonw.exe',  
           'README.txt', 'Scripts', 'tcl', 'Tools', 'vcruntime140.dll',       
      'words.txt']</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>To demonstrate these functions, the following example "walks" through a 
 directory, prints the names of all the files, and calls itself recursively on 
 all the directories.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Line</TH>
    <TH>Code</TH>
    <TH style="width: 30%;">Notes</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>1</CODE></TD>
    <TD><CODE>import os</CODE></TD>
    <TD>
      <P>Import in the <CODE>os</CODE> module.</P></TD></TR>
  <TR>
    <TD><CODE>2</CODE></TD>
    <TD><CODE>def walk(dirname):</CODE></TD>
    <TD>
      <P>Define the <CODE>walk</CODE> function.&nbsp; It has a single argument:  
            <CODE>dirname</CODE>.</P></TD></TR>
  <TR>
    <TD><CODE>3</CODE></TD>
    <TD><CODE>&nbsp;&nbsp;&nbsp;&nbsp;for name in     
      os.listdir(dirname):</CODE></TD>
    <TD>
      <P>The method <CODE>listdir</CODE> produces a list. We're using a        
      <CODE>for</CODE> loop to go through each element in the directory called   
           <CODE>dirname</CODE>.</P></TD></TR>
  <TR>
    <TD><CODE>4</CODE></TD>
    <TD><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path =       
      os.path.join(dirname, name)</CODE> </TD>
    <TD>
      <P><CODE>os.path.join</CODE> takes a directory and a file name and joins   
          them into a complete path. We assign this to the variable        
      <CODE>path</CODE>.</P></TD></TR>
  <TR>
    <TD><CODE>5</CODE></TD>
    <TD><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if       
      os.path.isfile(path):</CODE></TD>
    <TD>
      <P>We check to see whether <CODE>path</CODE> is a file using        
      <CODE>os.path.isfile</CODE>.<CODE></CODE></P></TD></TR>
  <TR>
    <TD><CODE>6</CODE></TD>
    <TD><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(path)</CODE></TD>
    <TD>
      <P>If it is a file, then we display the full path.</P></TD></TR>
  <TR>
    <TD><CODE>7</CODE></TD>
    <TD><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</CODE></TD>
    <TD>
      <P>Otherwise…</P></TD></TR>
  <TR>
    <TD><CODE>8</CODE></TD>
    <TD><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;walk(path)</CODE></TD>
    <TD>
      <P>We run this same function for that directory.</P></TD></TR></TBODY></TABLE>
<P>Here is the output to this program when we use <CODE>'C:\\Python'</CODE> as  
<CODE>dirname</CODE>:</P><CODE>C:\Python\append.txt<BR>      
C:\Python\DLLs\py.ico<BR>      C:\Python\DLLs\pyc.ico<BR>      
C:\Python\DLLs\pyexpat.pyd<BR>      C:\Python\DLLs\select.pyd<BR>      
C:\Python\DLLs\sqlite3.dll<BR>      (about 1,200 more lines)</CODE></DIV>
<DIV class="fullpage">
<H1>Catching Exceptions with Files</H1>
<P>A lot of things can go wrong when you try to read and write files. If you try 
 to open a file that doesn't exist, you get an <CODE>IOError</CODE>:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('bad_file')</CODE></TD>
    <TD><CODE>IOError: [Errno 2] No such file or directory:     
      'bad_file'</CODE></TD></TR></TBODY></TABLE>
<P>If you don't have permission to access a file:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fout = open('/etc/passwd', 'w')</CODE></TD>
    <TD><CODE>PermissionError: [Errno 13] Permission denied:       
      '/etc/passwd'</CODE></TD></TR></TBODY></TABLE>
<P>And if you try to open a directory for reading, you get</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('/home')</CODE></TD>
    <TD><CODE>IsADirectoryError: [Errno 21] Is a directory:   
  '/home'</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>To avoid these errors, you could use functions like  
<CODE>os.path.exists</CODE> and <CODE>os.path.isfile</CODE>, but it would take a 
 lot of time and code to check all the possibilities (if "<CODE>Errno 21</CODE>" 
 is any indication, there are at least 21 things that can go wrong).</P>
<P>It is better to go ahead and try - and deal with problems if they happen - 
 which is exactly what the <CODE>try</CODE> statement does. Here is how you 
might  use it with opening a file:</P><CODE>try:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;fin =  open('bad_file')<BR><BR>      except:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;print('Something went wrong.')</CODE>
<P>Python starts by executing the <CODE>try</CODE> clause. If all goes well, it 
 skips the <CODE>except</CODE> clause and proceeds. If an exception occurs, it 
 jumps out of the <CODE>try</CODE> clause and runs the <CODE>except</CODE> 
clause.</P>
<P>Handling an exception with a <CODE>try</CODE> statement is called catching an 
 exception. In this example, the <CODE>except</CODE> clause prints an error 
 message that is not very helpful. In general, catching an exception gives you a 
 chance to fix the problem, or try again, or at least end the program 
 gracefully.</P>
<P class="exercise"><A class="exercise" id="lesson7_09" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_09" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part5_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>Going back to our example, we need to assume that the open call might fail 
 and add recovery code when the open fails as follows:</P><CODE>file_name = 
 input('Enter the file name: ')<BR><BR>      try:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;fin = open(file_name)<BR><BR>      except:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;print("File cannot be opened:", file_name)<BR><BR>      
else:<BR>      &nbsp;&nbsp;&nbsp;&nbsp;count = 0<BR><BR>      
&nbsp;&nbsp;&nbsp;&nbsp;for line in fin:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<BR><BR>      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not 
 line.startswith('Subject:') :<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<BR><BR> 
     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count += 
 1<BR><BR>      &nbsp;&nbsp;&nbsp;&nbsp;print("There were", count, "subject 
lines  in", file_name)</CODE>
<P>Now when our user (or QA team) types in silliness or bad file names, we 
 "catch" them and recover gracefully:</P><CODE>Enter the file name:  
<STRONG>mbox.txt</STRONG><BR>      There were 1797 subject lines in 
 mbox.txt</CODE><CODE>Enter the file name: <STRONG>na na boo boo</STRONG><BR>    
  File cannot be opened: na na boo boo</CODE>
<P>Protecting the <CODE>open</CODE> call is a good example of the proper use of  
<CODE>try</CODE> and <CODE>except</CODE> in a Python program. We use the term 
 "Pythonic" when we are doing something the "Python way". We might say that the 
 above example is the Pythonic way to open a file.</P>
<P>Once you become more skilled in Python, you can engage in repartee with other 
 Python programmers to decide which of two equivalent solutions to a problem is 
 "more Pythonic". The goal to be "more Pythonic" captures the notion that 
 programming is part engineering and part art. We are not always interested in 
 just making something work, we also want our solution to be elegant and to be 
 appreciated as elegant by our peers.</P></DIV>
<DIV class="fullpage">
<H1>Debugging</H1>
<P>When you are reading and writing files, you might run into problems with 
 whitespace. These errors can be hard to debug because spaces, tabs, and 
newlines  are normally invisible:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>s = '1 2\t 3\n 4'<BR>              print(s)</CODE></TD>
    <TD><CODE>1 2&nbsp;&nbsp; 3<BR>              4</CODE></TD></TR></TBODY></TABLE>
<P>The built - in function <CODE>repr</CODE> can help. It takes any object as an 
 argument and returns a string representation of the object. For strings, it 
 represents whitespace characters with backslash sequences:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>s = '1 2\t 3\n 4'<BR>              print(repr(s))</CODE></TD>
    <TD><CODE>'1 2\t 3\n 4'</CODE></TD></TR></TBODY></TABLE>
<P>This can be helpful for debugging.</P>
<P>One other problem you might run into is that different systems use different 
 characters to indicate the end of a line. Some systems use a newline, 
 represented <CODE>\n</CODE>. Others use a return character, represented  
<CODE>\r</CODE>. Some use both. If you move files between different systems, 
 these inconsistencies might cause problems.</P>
<P>For most systems, there are applications to convert from one format to 
 another. You can find them (and read more about this issue) at <A href="https://en.wikipedia.org/wiki/Newline">https://en.wikipedia.org/wiki/Newline</A>. 
 Or, of course, you could write one yourself.</P></DIV></DIV>
<DIV id="copyright"><A href="https://online.cscc.edu/apps/python/book/copyright.htm">About 
 this Book</A></DIV></DIV></BODY></HTML>

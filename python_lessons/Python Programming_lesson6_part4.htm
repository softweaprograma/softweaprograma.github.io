<!DOCTYPE HTML>
<!-- saved from url=(0102)https://online.cscc.edu/apps/python/book/lesson_6_part_4.htm -->
<!DOCTYPE html PUBLIC "" ""><HTML class="part_4" lang="en"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
 
<META charset="utf-8">  <TITLE>Python Programming</TITLE> 
<SCRIPT src="Python%20Programming_lesson6_part4_files/jquery-1.12.3.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson6_part4_files/jquery.ui.touch-punch.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson6_part4_files/js.cookie.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson6_part4_files/lity.js" type="text/javascript" charset="utf-8"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson6_part4_files/highlight.min.js"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson6_part4_files/lesson.js" type="text/javascript"></SCRIPT>
 <LINK href="Python%20Programming_lesson6_part4_files/style-empty.css" rel="stylesheet" 
type="text/css" media="screen"> <LINK href="Python%20Programming_lesson6_part4_files/default.min.css" 
rel="stylesheet"> <LINK href="Python%20Programming_lesson6_part4_files/lity.css" 
rel="stylesheet" type="text/css"> <LINK href="Python%20Programming_lesson6_part4_files/lesson.css" 
rel="stylesheet" type="text/css" media="screen"> 
<META name="GENERATOR" content="MSHTML 11.00.10570.1001"></HEAD> 
<BODY>
<DIV id="content">
<DIV id="toc"></DIV>
<DIV id="title">
<H1>Lesson 6, Bit 4: Tuples</H1></DIV>
<DIV id="page">
<DIV class="fullpage">
<H1>Tuples</H1>
<P><STRONG>Tuples</STRONG> are used to hold together multiple objects. Think of 
them as similar to lists, but without the extensive functionality that the list 
class gives you. One major feature of tuples is that they are immutable like 
strings i.e. you cannot modify tuples.</P>
<P>Tuples are defined by specifying items separated by commas within an optional 
pair of parentheses.</P>
<P>Tuples are usually used in cases where a statement or a user-defined function 
can safely assume that the collection of values i.e. the tuple of values used 
will not change.</P>
<P>Fun fact: The word "tuple" comes from the names given to sequences of numbers 
of varying lengths: single, double, triple, quadruple, quituple, sextuple, 
septuple, etc.</P></DIV>
<DIV class="fullpage">
<H1>Tuples are Immutable</H1>
<P>A tuple is a sequence of values much like a list. The values stored in a 
tuple can be any type, and they are indexed by integers. The important 
difference is that tuples are immutable. Tuples are also comparable and hashable 
so we can sort lists of them and use tuples as key values in Python 
dictionaries.</P>
<P>Syntactically, a tuple is a comma-separated list of values:</P><CODE>t = 'a', 
'b', 'c', 'd', 'e'</CODE></DIV>
<DIV class="fullpage">
<P>Although it is not necessary, it is common and a best practice to enclose 
tuples in parentheses to help us quickly identify tuples when we look at Python 
code:</P><CODE>t = ('a', 'b', 'c', 'd', 'e')</CODE></DIV>
<DIV class="fullpage">
<P>To create a tuple with a single element, you have to include the final 
comma:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t1 = ('a',)<BR><BR>              type(t1)</CODE></TD>
    <TD><CODE>&lt;type 'tuple'&gt;</CODE></TD></TR></TBODY></TABLE>
<P>Without the comma Python treats <CODE>('a')</CODE> as an expression with a 
string in parentheses that evaluates to a string:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t2 = ('a')<BR><BR>              type(t2)</CODE></TD>
    <TD><CODE>&lt;type 'str'&gt;</CODE></TD></TR></TBODY></TABLE>
<P class="exercise"><A class="exercise" id="lesson6_23" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson6_23" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson6_part4_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>Another way to construct a tuple is the built-in function tuple. With no 
argument, it creates an empty tuple:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t = tuple()<BR><BR>              print(t)</CODE></TD>
    <TD><CODE>()</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>If the argument is a sequence (string, list, or tuple), the result of the 
call to tuple is a tuple with the elements of the sequence:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t = tuple('lupins')<BR><BR>              print(t)</CODE></TD>
    <TD><CODE>('l', 'u', 'p', 'i', 'n', 's')</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>Because <CODE>tuple</CODE> is the name of a constructor, you should avoid 
using it as a variable name.</P></DIV>
<DIV class="fullpage">
<P>Most list operators also work on tuples. The bracket operator indexes an 
element:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t = ('a', 'b', 'c', 'd', 'e')<BR><BR>              
      print(t[0])</CODE></TD>
    <TD><CODE>a</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>And the <CODE>slice</CODE> operator selects a range of elements.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t = ('a', 'b', 'c', 'd', 'e')<BR><BR>              
      print(t[1:3])</CODE></TD>
    <TD><CODE>('b', 'c')</CODE></TD></TR></TBODY></TABLE>
<P class="exercise"><A class="exercise" id="lesson6_24" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson6_24" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson6_part4_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>But if you try to modify one of the elements of the tuple, you get an 
error:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t = ('a', 'b', 'c', 'd', 'e')<BR><BR>              t[0] = 
      'A'</CODE></TD>
    <TD><CODE>TypeError: 'tuple' object does not support item 
    assignment</CODE></TD></TR></TBODY></TABLE>
<P>You can't modify the elements of a tuple, but you can replace one tuple with 
another:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>t = ('a', 'b', 'c', 'd', 'e')<BR><BR>              t = ('A',) + 
      t[1:]<BR><BR>              print(t)</CODE></TD>
    <TD><CODE>('A', 'b', 'c', 'd', 'e')</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<H1>Comparing Tuples</H1>
<P>The comparison operators work with tuples and other sequences. Python starts 
by comparing the first element from each sequence. If they are equal, it goes on 
to the next element, and so on, until it finds elements that differ. Subsequent 
elements are not considered (even if they are really big).</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>(0, 1, 2) &lt; (0, 3, 4)</CODE></TD>
    <TD><CODE>True</CODE></TD></TR>
  <TR>
    <TD><CODE>(0, 1, 2000000) &lt; (0, 3, 4)</CODE></TD>
    <TD><CODE>True</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>The <CODE>sort</CODE> function works the same way. It sorts primarily by 
first element, but in the case of a tie, it sorts by second element, and so 
on.</P></DIV>
<DIV class="fullpage">
<P>This feature lends itself to a pattern called DSU for:</P>
<P><STRONG>Decorate: </STRONG>a sequence by building a list of tuples with one 
or more sort keys preceding the elements from the sequence,</P>
<P><STRONG>Sort:</STRONG> the list of tuples using the Python built-in sort, 
and</P>
<P><STRONG>Undecorate:</STRONG> by extracting the sorted elements of the 
sequence.</P></DIV>
<DIV class="fullpage">
<P>For example, suppose you have a list of words and you want to sort them from 
longest to shortest:</P><CODE>txt = 'Tis but a flesh wound'<BR><BR>      words = 
txt.split()<BR><BR>      t = list()<BR><BR>      for word in words:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;t.append((len(word), word))<BR><BR>      
t.sort(reverse=True)<BR><BR>      res = list()<BR><BR>      for length, word in 
t:<BR>      &nbsp;&nbsp;&nbsp;&nbsp;res.append(word)<BR><BR>      
print(res)</CODE>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH>
    <TH>Notes</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>txt = 'Tis but a flesh wound'</CODE></TD>
    <TD><CODE><EM>None</EM></CODE></TD>
    <TD>
      <P>We create the string <CODE>txt</CODE>.</P></TD></TR>
  <TR>
    <TD><CODE>words = txt.split()</CODE></TD>
    <TD><CODE><EM>None</EM></CODE> </TD>
    <TD>
      <P>The <CODE>split</CODE> method uses the default argument to create a 
      list of individual words.</P></TD></TR>
  <TR>
    <TD><CODE>t = list()</CODE></TD>
    <TD><CODE><EM>None</EM></CODE> </TD>
    <TD>
      <P>We create an empty list called <CODE>t</CODE>.</P></TD></TR>
  <TR>
    <TD><CODE>for word in words:<BR>            
      &nbsp;&nbsp;&nbsp;&nbsp;t.append((len(word), word))</CODE></TD>
    <TD><CODE><EM>None</EM></CODE> </TD>
    <TD>
      <P>Iterate through the list words.&nbsp; Append to the list <CODE>t</CODE> 
      a tuple which contains the length of each word and the word itself. 
  </P></TD></TR>
  <TR>
    <TD><CODE>t.sort(reverse=True)</CODE></TD>
    <TD><CODE><EM>None</EM></CODE></TD>
    <TD>
      <P><CODE>sort</CODE> compares the first element (length) first, and only 
      considers the second element to break ties. The keyword argument 
      <CODE>reverse=True</CODE> tells sort to go in decreasing order.</P></TD></TR>
  <TR>
    <TD><CODE>res = list()</CODE></TD>
    <TD><CODE><EM>None</EM></CODE> </TD>
    <TD>
      <P>We create an empty list called <CODE>res</CODE>.</P></TD></TR>
  <TR>
    <TD><CODE>for length, word in t:<BR>            
      &nbsp;&nbsp;&nbsp;&nbsp;res.append(word)</CODE></TD>
    <TD><CODE><EM>None</EM></CODE></TD>
    <TD>
      <P>The second loop traverses the list of tuples and builds a list of words 
      in descending order of length. The four-character words are sorted in 
      reverse alphabetical order, so "what" appears before "soft" in the 
      following list.</P></TD></TR>
  <TR>
    <TD><CODE>print(res)</CODE></TD>
    <TD><CODE>['wound', 'flesh', 'but', 'Tis', 'a']</CODE></TD>
    <TD>
      <P>We display the resulting list.</P></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<H1>Tuple Assignment</H1>
<P>One of the unique syntactic features of the Python language is the ability to 
have a tuple on the left side of an assignment statement. This allows you to 
assign more than one variable at a time when the left side is a 
sequence.</P></DIV>
<DIV class="fullpage">
<P>In this example we have a two-element list (which is a sequence) and assign 
the first and second elements of the sequence to the variables <CODE>x</CODE> 
and <CODE>y</CODE> in a single statement.</P><CODE>m = ['have', 'fun']<BR><BR>   
   x, y = m</CODE>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>print(x)</CODE></TD>
    <TD><CODE>have</CODE></TD></TR>
  <TR>
    <TD><CODE>print(y)</CODE></TD>
    <TD><CODE>fun</CODE></TD></TR></TBODY></TABLE>
<P>It is not magic, Python roughly translates the tuple assignment syntax to be 
the following:</P><CODE>m = ['have', 'fun']<BR><BR>      x = m[0]<BR><BR>      y 
= m[1]</CODE>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>print(x)</CODE></TD>
    <TD><CODE>have</CODE></TD></TR>
  <TR>
    <TD><CODE>print(y)</CODE></TD>
    <TD><CODE>fun</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>It should be noted that Python does not translate the syntax literally. For 
example, if you try this with a dictionary, it will not work as you might 
expect.</P></DIV>
<DIV class="fullpage">
<P>Stylistically when we use a tuple on the left side of the assignment 
statement, we omit the parentheses, but the following is an equally valid 
syntax:</P><CODE>m = ['have', 'fun']<BR><BR>      (x, y) = m</CODE>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>print(x)</CODE></TD>
    <TD><CODE>have</CODE></TD></TR>
  <TR>
    <TD><CODE>print(y)</CODE></TD>
    <TD><CODE>fun</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>A particularly clever application of tuple assignment allows us to swap the 
values of two variables in a single statement:</P><CODE>a, b = b, a</CODE>
<P>Both sides of this statement are tuples, but the left side is a tuple of 
variables; the right side is a tuple of expressions. Each value on the right 
side is assigned to its respective variable on the left side. All the 
expressions on the right side are evaluated before any of the assignments.</P>
<P>The number of variables on the left and the number of values on the right 
must be the same:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>a, b = 1, 2, 3</CODE></TD>
    <TD><CODE>ValueError: too many values to unpack (expected 
  2)</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>More generally, the right side can be any kind of sequence (string, list, or 
tuple). For example, to split an email address into a user name and a domain, 
you could write:</P><CODE>addr = 'monty@python.org'<BR><BR>      uname, domain = 
addr.split('@')</CODE>
<P>The return value from <CODE>split</CODE> is a list with two elements; the 
first element is assigned to <CODE>uname</CODE>, the second to 
<CODE>domain</CODE>.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>print(uname)</CODE></TD>
    <TD><CODE>monty</CODE></TD></TR>
  <TR>
    <TD><CODE>print(domain)</CODE></TD>
    <TD><CODE>python.org</CODE></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV id="copyright"><A href="https://online.cscc.edu/apps/python/book/copyright.htm">About 
this Book</A></DIV></DIV></BODY></HTML>

<!DOCTYPE HTML>
<!-- saved from url=(0102)https://online.cscc.edu/apps/python/book/lesson_7_part_2.htm -->
<!DOCTYPE html PUBLIC "" ""><HTML class="part_2" lang="en"><HEAD><META 
content="IE=11.0000" http-equiv="X-UA-Compatible">
 
<META charset="utf-8">  <TITLE>Python Programming</TITLE> 
<SCRIPT src="Python%20Programming_lesson7_part2_files/jquery-1.12.3.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson7_part2_files/jquery.ui.touch-punch.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson7_part2_files/js.cookie.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson7_part2_files/lity.js" type="text/javascript" charset="utf-8"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson7_part2_files/highlight.min.js"></SCRIPT>
 
<SCRIPT src="Python%20Programming_lesson7_part2_files/lesson.js" type="text/javascript"></SCRIPT>
 <LINK href="Python%20Programming_lesson7_part2_files/style-empty.css" rel="stylesheet" 
type="text/css" media="screen"> <LINK href="Python%20Programming_lesson7_part2_files/default.min.css" 
rel="stylesheet"> <LINK href="Python%20Programming_lesson7_part2_files/lity.css" 
rel="stylesheet" type="text/css"> <LINK href="Python%20Programming_lesson7_part2_files/lesson.css" 
rel="stylesheet" type="text/css" media="screen"> 
<META name="GENERATOR" content="MSHTML 11.00.10570.1001"></HEAD> 
<BODY>
<DIV id="content">
<DIV id="toc"></DIV>
<DIV id="title">
<H1>Lesson 7, Bit 2: Reading and Searching Data from Files</H1></DIV>
<DIV id="page">
<DIV class="fullpage">
<H1>Text Files and Lines</H1>
<P>A text file can be thought of as a sequence of lines, much like a Python 
string can be thought of as a sequence of characters. To break the file into 
lines, there is a special character that represents the "end of the line" called 
the newline character.</P>
<P>We've seen as far back as Lesson 1 that the newline character is 
<CODE>\n</CODE>. Remember that even though this looks like two characters, it is 
actually a single character. When we look at the variable by entering "stuff" in 
the interpreter, it shows us the <CODE>\n</CODE> in the string, but when we use 
print to show the string, we see the string broken into two lines by the newline 
character.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>stuff = '1\n2'<BR>              print(stuff)</CODE></TD>
    <TD><CODE>1<BR>              2</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>You can also see that the length of the string <CODE>'1\n2'</CODE> is three 
characters because the newline character is a single character.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>stuff = '1\n2'<BR>              print(len(stuff))</CODE></TD>
    <TD><CODE>3</CODE></TD></TR></TBODY></TABLE>
<P>So when we look at the lines in a file, we need to imagine that there is a 
special invisible character called the newline at the end of each line that 
marks the end of the line.</P>
<P>So the newline character separates the characters in the file into 
lines.</P></DIV>
<DIV class="fullpage">
<H1>Reading Files</H1>
<P>While the file handle does not contain the data for the file, it is quite 
easy to construct a <CODE>for</CODE> loop to read through and count each of the 
lines in a file:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('words.txt')<BR><BR>              count = 0<BR><BR>   
                 for line in fin:<BR>              &nbsp;&nbsp;&nbsp;&nbsp;count 
      += 1<BR><BR>              print("Line Count", count)</CODE></TD>
    <TD><CODE>Line Count 113809</CODE></TD></TR></TBODY></TABLE>
<P>We can use the file handle as the sequence in our <CODE>for</CODE> loop. Our 
<CODE>for</CODE> loop simply counts the number of lines in the file and prints 
them out. The rough translation of the <CODE>for</CODE> loop into English is, 
"for each line in the file represented by the file handle, add one to the count 
variable."</P></DIV>
<DIV class="fullpage">
<P>The reason that the <CODE>open</CODE> function does not read the entire file 
is that the file might be quite large with many gigabytes of data. The 
<CODE>open</CODE> statement takes the same amount of time regardless of the size 
of the file. The <CODE>for</CODE> loop actually causes the data to be read from 
the file.</P>
<P>When the file is read using a <CODE>for</CODE> loop in this manner, Python 
takes care of splitting the data in the file into separate lines using the 
newline character. Python reads each line through the newline and includes the 
newline as the last character in the line variable for each iteration of the 
<CODE>for</CODE> loop.</P>
<P>Because the <CODE>for</CODE> loop reads the data one line at a time, it can 
efficiently read and count the lines in very large files without running out of 
main memory to store the data. The above program can count the lines in any size 
file using very little memory since each line is read, counted, and then 
discarded.</P>
<P class="exercise"><A class="exercise" id="lesson7_01" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_01" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<H1>The readline Method</H1>
<P>The file object provides several methods for reading, including 
<CODE>readline</CODE>, which reads characters from the file until it gets to a 
newline and returns the result as a string:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('words.txt')<BR>              
fin.readline()</CODE></TD>
    <TD><CODE>'aa\n'</CODE></TD></TR></TBODY></TABLE>
<P>The first word in this particular list is "aa", which is a kind of lava. The 
sequence <CODE>\n</CODE> represents two whitespace characters, a carriage return 
and a newline, that separate this word from the next.</P>
<P>When we print the result <CODE>fin.readline()</CODE>, we cannot see the 
<CODE>\n</CODE> because it renders as a new line break.&nbsp; But if we 
immediately display another character, we can see the line break:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('words.txt')<BR>              
      print(fin.readline())<BR>              print("hi")</CODE></TD>
    <TD><CODE>aa<BR>              hi</CODE></TD></TR></TBODY></TABLE>
<P class="exercise"><A class="exercise" id="lesson7_02" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_02" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>The file object keeps track of where it is in the file, so if you call 
<CODE>readline</CODE> again, you get the next word:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin.readline()</CODE></TD>
    <TD><CODE>'aah\n'</CODE></TD></TR></TBODY></TABLE>
<P>The next word is "aah", which is a perfectly legitimate word, so stop looking 
at me like that. </P>
<P class="exercise"><A class="exercise" id="lesson7_03" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_03" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>If it's the whitespace that's bothering you, we can get rid of it with the 
string method <CODE>strip</CODE>:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>line = fin.readline()<BR><BR>              word = 
      line.strip()<BR><BR>              word</CODE></TD>
    <TD><CODE>'aahed'</CODE></TD></TR></TBODY></TABLE>
<P>If you recall back to Lesson 5, strip will remove any whitespace (spaces, 
tabs, or newlines) from the beginning and end of a string.&nbsp; </P>
<P class="exercise"><A class="exercise" id="lesson7_04" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_04" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>You can also use a file object as part of a <CODE>for</CODE> loop. This 
program reads <CODE>words.txt</CODE> and prints each word, one per line:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('words.txt')<BR><BR>              for line in 
      fin:<BR>              &nbsp;&nbsp;&nbsp;&nbsp;word = line.strip()<BR>      
              &nbsp;&nbsp;&nbsp;&nbsp;print(word)</CODE></TD>
    <TD><CODE>aa<BR>              aah<BR>              aahed<BR>              
      aahing<BR>              aahs<BR>              aal<BR>              
      aalii<BR>              aaliis<BR>              aals<BR>              
      aardvark<BR>              (...)</CODE></TD></TR></TBODY></TABLE>
<P class="exercise"><A class="exercise" id="lesson7_05" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_05" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<H1>The readlines Method</H1>
<P>If you want to store all lines in a list of lines, you can use the 
<CODE>readlines</CODE> method:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('words.txt')<BR><BR>              words = 
      fin.readlines()</CODE></TD>
    <TD><CODE>['aa\n', 'aah\n', 'aahed\n', 'aahing\n', 'aahs\n', 'aal\n', 
      'aalii\n', 'aaliis\n', 'aals\n', 'aardvark\n', 
(...)]</CODE></TD></TR></TBODY></TABLE>
<P class="exercise"><A class="exercise" id="lesson7_06" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_06" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<P>When we use the <CODE>len</CODE> function to see the length of the list 
called <CODE>words</CODE>, we get the full number of lines in the file 
<CODE>words.txt</CODE>:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>len(words)</CODE></TD>
    <TD><CODE>113809</CODE></TD></TR></TBODY></TABLE>
<P>Just like the number we got when we counted each line in the file!</P>
<P>So now, if we want to access the 15<SUP>th</SUP> line in this file, we can 
display the 14<SUP>th</SUP> index (remember that indices start with 0 so the 
15<SUP>th</SUP> item is actually the 14<SUP>th</SUP> index):</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Result</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>words[14]</CODE></TD>
    <TD><CODE>'aasvogel\n'</CODE></TD></TR></TBODY></TABLE>
<P>Because <CODE>words</CODE> is now a list, you can use all of the list methods 
(<CODE>find</CODE>, <CODE>replace</CODE>, slicing, etc) on it.</P>
<P class="exercise"><A class="exercise" id="lesson7_07" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_07" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<H1>The read Method</H1>
<P>If you know the file is relatively small compared to the size of your main 
memory, you can read the whole file into one string using the <CODE>read</CODE> 
method on the file handle.</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('words.txt')<BR><BR>              words = 
      fin.read()<BR><BR>              print(len(words))</CODE></TD>
    <TD><CODE>1016714</CODE></TD></TR>
  <TR>
    <TD><CODE>print(words[:20])</CODE></TD>
    <TD><CODE>aa<BR>              aah<BR>              aahed<BR>              
      aahing</CODE></TD></TR></TBODY></TABLE>
<P>In this example, the entire contents (all 1,016,714 characters) of the file 
<CODE>words.txt</CODE> are read directly into the variable <CODE>words</CODE>. 
We use string slicing to print out the first 20 characters of the string data 
stored in <CODE>words</CODE>.</P>
<P>When the file is read in this manner, all the characters including all of the 
lines and newline characters are one big string in the variable 
<CODE>words</CODE>. Remember that this form of the <CODE>open</CODE> function 
should only be used if the file data will fit comfortably in the main memory of 
your computer.</P>
<P>If the file is too large to fit in main memory, you should write your program 
to read the file in chunks using a <CODE>for</CODE> or <CODE>while</CODE> 
loop.</P>
<P class="exercise"><A class="exercise" id="lesson7_08" href="https://online.cscc.edu/apps/python/exercises/index.php?e=lesson7_08" 
data-lity=""><IMG alt="Launch Exercise" src="Python%20Programming_lesson7_part2_files/python_launch_100.png"></A></P></DIV>
<DIV class="fullpage">
<H1>Searching Through a File</H1>
<P>When you are searching through data in a file, it is a very common pattern to 
read through a file, ignoring most of the lines and only processing lines which 
meet a particular condition. We can combine the pattern for reading a file wit 
string methods to build simple search mechanisms.</P>
<P>For these examples, we are going to use the file called 
<CODE>mbox.txt</CODE>.&nbsp; You can download it from <A href="https://online.cscc.edu/apps/python/book/mbox.txt">https://online.cscc.edu/apps/python/book/mbox.txt</A>.&nbsp; 
This file is a record of e-mail activity from various individuals in an open 
source project development team. </P>
<P>For example, if we wanted to read a file and only print out lines which 
started with the prefix "From:", we could use the string method 
<CODE>startswith</CODE> to select only those lines with the desired prefix:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('mbox.txt')<BR><BR>              for line in fin:<BR> 
                   &nbsp;&nbsp;&nbsp;&nbsp;if line.startswith("From:"):<BR>      
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              
      print(line)</CODE></TD>
    <TD><CODE>From: stephen.marquard@uct.ac.za<BR>              From: 
      louis@media.berkeley.edu<BR>              From: zqian@umich.edu<BR>        
            From: rjlowe@iupui.edu<BR>              From: zqian@umich.edu<BR>    
                ...</CODE></TD></TR></TBODY></TABLE>
<P>The output looks great since the only lines we are seeing are those which 
start with "From:", but why are we seeing the extra blank lines? Oh yeah – we 
forgot about that invisible newline character. Each of the lines ends with a 
newline, so the print statement prints the string in the variable line which 
includes a newline and then print adds another newline, resulting in the double 
spacing effect we see.</P></DIV>
<DIV class="fullpage">
<P>We could use line slicing to print all but the last character, but a simpler 
approach is to use the <CODE>strip</CODE> or <CODE>rstrip</CODE> method which 
strips whitespace from the right side of a string as follows:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('mbox.txt')<BR><BR>              for line in fin:<BR> 
                   &nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;if line.startswith("From:"):<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(line)</CODE></TD>
    <TD><CODE>From: stephen.marquard@uct.ac.za<BR>              From: 
      louis@media.berkeley.edu<BR>              From: zqian@umich.edu<BR>        
            From: rjlowe@iupui.edu<BR>              From: zqian@umich.edu<BR>    
                ...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<P>As your file processing programs get more complicated, you may want to 
structure your search loops using <CODE>continue</CODE>. The basic idea of the 
search loop is that you are looking for "interesting" lines and effectively 
skipping "uninteresting" lines. And then when we find an interesting line, we do 
something with that line.</P></DIV>
<DIV class="fullpage">
<P>We can structure the loop to follow the pattern of skipping uninteresting 
lines as follows:</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('mbox.txt')<BR><BR>              for line in fin:<BR> 
                   &nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<BR><BR>           
         &nbsp;&nbsp;&nbsp;&nbsp;# Skip uninteresting line<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;if not line.startswith("From:"):<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<BR><BR>           
         &nbsp;&nbsp;&nbsp;&nbsp;# Process 'interesting' line<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;else:<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(line)</CODE></TD>
    <TD><CODE>From: stephen.marquard@uct.ac.za<BR>              From: 
      louis@media.berkeley.edu<BR>              From: zqian@umich.edu<BR>        
            From: rjlowe@iupui.edu<BR>              From: zqian@umich.edu<BR>    
                ...</CODE></TD></TR></TBODY></TABLE>
<P>The output of the program is the same. In English, the uninteresting lines 
are those which do not start with "From:", which we skip using continue. For the 
"interesting" lines (i.e., those that start with "From:") we perform the 
processing on those lines.</P></DIV>
<DIV class="fullpage">
<P>We can use the <CODE>find</CODE> string method to simulate a text editor 
search that finds lines where the search string is anywhere in the line. Since 
find looks for an occurrence of a string within another string and either 
returns the position of the string or <CODE>&nbsp;- 1</CODE> if the string was 
not found, we can write the following loop to show lines which contain the 
string "@uct.ac.za" (i.e., they come from the University of Cape Town in South 
Africa):</P>
<TABLE cellspacing="0" cellpadding="0">
  <THEAD>
  <TR>
    <TH>Code</TH>
    <TH>Output</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD><CODE>fin = open('mbox.txt')<BR><BR>              for line in fin:<BR> 
                   &nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<BR><BR>           
         &nbsp;&nbsp;&nbsp;&nbsp;# Skip uninteresting line<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;if line.find("@uct.ac.za") == &nbsp;- 1:<BR>       
             &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<BR><BR>    
                &nbsp;&nbsp;&nbsp;&nbsp;# Process 'interesting' line<BR>         
           &nbsp;&nbsp;&nbsp;&nbsp;else:<BR>              
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(line)</CODE></TD>
    <TD><CODE>From stephen.marquard@uct.ac.za Sat Jan&nbsp; 5 09:14:16 
      2008<BR>              X - Authentication - Warning: 
      nakamura.uits.iupui.edu: apache set sender to stephen.marquard@uct.ac.za 
      using –f<BR>              From: stephen.marquard@uct.ac.za<BR>             
       Author: stephen.marquard@uct.ac.za<BR>              From 
      david.horwitz@uct.ac.za Fri Jan&nbsp; 4 07:02:32 2008<BR>              
      ...</CODE></TD></TR></TBODY></TABLE></DIV>
<DIV class="fullpage">
<H1>Letting the User choose the File Name</H1>
<P>We really do not want to have to edit our Python code every time we want to 
process a different file. It would be more usable to ask the user to enter the 
file name string each time the program runs so they can use our program on 
different files without changing the Python code.</P>
<P>This is quite simple to do by reading the file name from the user using 
<CODE>input</CODE> as follows:</P><CODE>file_name = input('Enter the file name: 
')<BR>      fin = open(file_name)<BR><BR>      count = 0<BR><BR>      for line 
in fin:<BR>      &nbsp;&nbsp;&nbsp;&nbsp;line = line.strip()<BR><BR>      
&nbsp;&nbsp;&nbsp;&nbsp;if not line.startswith('Subject:') :<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;else:<BR>      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count += 1<BR><BR>      
print("There were", count, "subject lines in", file_name)</CODE>
<P>We read the file name from the user and place it in a variable named 
<CODE>file_name</CODE> and open that file. Now we can run the program repeatedly 
on different files.</P><CODE>Enter the file name: <STRONG>mbox.txt</STRONG><BR>  
    There were 1797 subject lines in mbox.txt</CODE><CODE>Enter the file name: 
<STRONG>mbox - short.txt</STRONG><BR>      There were 27 subject lines in 
mbox.txt</CODE></DIV>
<DIV class="fullpage">
<P>Before peeking at the next section, take a look at the above program and ask 
yourself, "What could go possibly wrong here?" or "What might our friendly user 
do that would cause our nice little program to ungracefully exit with a 
traceback, making us look not - so - cool in the eyes of our users?"</P>
<P>What if our user types something that is not a file name?</P><CODE>Enter the 
file name: <STRONG>missing.txt</STRONG><BR><BR>      Traceback (most recent call 
last):<BR>      &nbsp;&nbsp;File "examples.py", line 28, in &lt;module&gt;<BR>   
   &nbsp;&nbsp;&nbsp;&nbsp;fin = open(file_name)<BR>      FileNotFoundError: 
[Errno 2] No such file or directory: 'missing.txt'</CODE>
<P>Do not laugh, users will eventually do every possible thing they can do to 
break your programs - either on purpose or with malicious intent. As a matter of 
fact, an important part of any software development team is a person or group 
called Quality Assurance (or QA for short) whose very job it is to do the 
craziest things possible in an attempt to break the software that the programmer 
has created.</P>
<P>The QA team is responsible for finding the flaws in programs before we have 
delivered the program to the end users who may be purchasing the software or 
paying our salary to write the software. So the QA team is the programmer's best 
friend.</P>
<P>So now that we see the flaw in the program, we can elegantly fix it using the 
try/except structure – but we will learn more about it later in this lesson.  
For now, let us move in to learn how to write our files.</P></DIV></DIV>
<DIV id="copyright"><A href="https://online.cscc.edu/apps/python/book/copyright.htm">About 
this Book</A></DIV></DIV></BODY></HTML>
